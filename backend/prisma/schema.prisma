generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username      String   @unique
  email         String   @unique
  password_hash String
  created_at    DateTime @default(now()) @db.Timestamptz(6)

  posts    Post[]
  comments Comment[]
  likes    Like[]

  followers Follow[] @relation("UserFollowers")
  following Follow[] @relation("UserFollowing")
}

model Post {
  post_id       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id       String   @db.Uuid
  recipe_name   String
  prep_time_min Int?
  difficulty    String?
  instructions  String?
  cuisine       String?
  created_at    DateTime @default(now()) @db.Timestamptz(6)

  user     User      @relation(fields: [user_id], references: [user_id])
  comments Comment[]
  likes    Like[]
}

model Comment {
  comment_id String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content    String
  created_at DateTime @default(now()) @db.Timestamptz(6)

  user_id String @db.Uuid
  post_id String @db.Uuid

  user User @relation(fields: [user_id], references: [user_id])
  post Post @relation(fields: [post_id], references: [post_id])
}

model Like {
  user_id    String   @db.Uuid
  post_id    String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)

  user User @relation(fields: [user_id], references: [user_id])
  post Post @relation(fields: [post_id], references: [post_id])

  @@id([user_id, post_id]) // composite primary key to avoid duplicates
}

model Follow {
  follower_id String @db.Uuid
  followed_id String @db.Uuid

  follower User @relation("UserFollowing", fields: [follower_id], references: [user_id])
  followed User @relation("UserFollowers", fields: [followed_id], references: [user_id])

  @@id([follower_id, followed_id]) // composite primary key
}
